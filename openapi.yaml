components:
  schemas:
    CampaignDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the campaign
        name:
          type: string
          description: Name of the campaign
        description:
          type: string
          description: Description of the campaign
        startDate:
          type: string
          format: date-time
          description: Start date of the campaign
        endDate:
          type: string
          format: date-time
          description: End date of the campaign
        active:
          type: boolean
          description: Indicates if the campaign is active
        questions:
          type: array
          items:
            $ref: '#/components/schemas/QuestionDTO'
          description: List of questions in the campaign
      required:
        - name
        - startDate
        - endDate

    QuestionDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the question
        text:
          type: string
          description: The question text
        campaignId:
          type: integer
          format: int64
          description: ID of the campaign this question belongs to
        required:
          type: boolean
          description: Indicates if an answer to this question is required
        orderIndex:
          type: integer
          description: The display order of the question within the campaign
        answerOptions:
          type: array
          items:
            $ref: '#/components/schemas/AnswerOptionDTO'
          description: Available answer options for the question
      required:
        - text
        - campaignId

    AnswerOptionDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the answer option
        text:
          type: string
          description: The text of the answer option
        questionId:
          type: integer
          format: int64
          description: ID of the question this answer option belongs to
        orderIndex:
          type: integer
          description: The display order of the answer option within the question
      required:
        - text
        - questionId

    UserResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the user response
        userId:
          type: string
          description: Identifier of the user who submitted the response
        questionId:
          type: integer
          format: int64
          description: ID of the question being answered
        answerOptionId:
          type: integer
          format: int64
          description: ID of the selected answer option
        customAnswer:
          type: string
          description: Custom text answer provided by the user, if applicable
        submissionDate:
          type: string
          format: date-time
          description: Date and time when the response was submitted
      required:
        - userId
        - questionId

    CampaignSummaryDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        active:
          type: boolean
        questionCount:
          type: integer
          description: Number of questions in the campaign
        responseCount:
          type: integer
          description: Number of user responses received

  responses:
    BadRequest:
      description: Bad request - invalid input parameter or request body
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 400
              error:
                type: string
                example: "Bad Request"
              message:
                type: string
                example: "Invalid input data provided"
              path:
                type: string
                example: "/api/campaigns"
              timestamp:
                type: string
                format: date-time

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 404
              error:
                type: string
                example: "Not Found"
              message:
                type: string
                example: "Resource with ID 123 not found"
              path:
                type: string
                example: "/api/campaigns/123"
              timestamp:
                type: string
                format: date-time

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 500
              error:
                type: string
                example: "Internal Server Error"
              message:
                type: string
                example: "An unexpected error occurred"
              path:
                type: string
                example: "/api/campaigns"
              timestamp:
                type: string
                format: date-time

    Unauthorized:
      description: Unauthorized - authentication required
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 401
              error:
                type: string
                example: "Unauthorized"
              message:
                type: string
                example: "Authentication is required to access this resource"
              path:
                type: string
              timestamp:
                type: string
                format: date-time

    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 403
              error:
                type: string
                example: "Forbidden"
              message:
                type: string
                example: "You do not have permission to access this resource"
              path:
                type: string
              timestamp:
                type: string
                format: date-time

openapi: 3.0.3
info:
  title: Questionnaire API
  description: |
    API for managing questionnaires, including campaigns, questions, and user responses.
    This API allows for creating and managing survey campaigns, defining questions and answer options,
    and collecting user responses.
  version: 1.0.0
  contact:
    name: Questionnaire API Support
    email: support@example.com
servers:
  - url: http://localhost:8080
    description: Local development server
  - url: https://api.example.com
    description: Production server

tags:
  - name: Campaigns
    description: Operations related to questionnaire campaigns
  - name: Questions
    description: Operations related to questions within campaigns
  - name: User Responses
    description: Operations related to user responses to questionnaires

paths:
  /api/campaigns:
    get:
      tags:
        - Campaigns
      summary: Get all campaigns
      description: Retrieves a list of all available questionnaire campaigns
      operationId: getAllCampaigns
      responses:
        '200':
          description: Successfully retrieved campaigns
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CampaignDTO'
              example:
                - id: 1
                  name: "Customer Satisfaction Survey"
                  description: "Survey to measure customer satisfaction with our services"
                  startDate: "2023-01-01"
                  endDate: "2023-12-31"
                  active: true
                - id: 2
                  name: "Product Feedback"
                  description: "Collect feedback on our new product line"
                  startDate: "2023-06-01"
                  endDate: "2023-08-31"
                  active: true
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Campaigns
      summary: Create a new campaign
      description: Creates a new questionnaire campaign
      operationId: createCampaign
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignDTO'
            example:
              name: "Employee Engagement Survey"
              description: "Annual survey to measure employee engagement"
              startDate: "2023-09-01"
              endDate: "2023-09-30"
              active: true
      responses:
        '201':
          description: Campaign successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignDTO'
              example:
                id: 3
                name: "Employee Engagement Survey"
                description: "Annual survey to measure employee engagement"
                startDate: "2023-09-01"
                endDate: "2023-09-30"
                active: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/campaigns/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
        description: ID of the campaign
    get:
      tags:
        - Campaigns
      summary: Get campaign by ID
      description: Retrieves a specific campaign by its ID
      operationId: getCampaignById
      responses:
        '200':
          description: Successfully retrieved campaign
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignDTO'
              example:
                id: 1
                name: "Customer Satisfaction Survey"
                description: "Survey to measure customer satisfaction with our services"
                startDate: "2023-01-01"
                endDate: "2023-12-31"
                active: true
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Campaigns
      summary: Update a campaign
      description: Updates an existing campaign
      operationId: updateCampaign
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignDTO'
            example:
              id: 1
              name: "Updated Customer Satisfaction Survey"
              description: "Updated survey to measure customer satisfaction"
              startDate: "2023-01-01"
              endDate: "2023-12-31"
              active: false
      responses:
        '200':
          description: Campaign successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Campaigns
      summary: Delete a campaign
      description: Deletes a campaign by its ID
      operationId: deleteCampaign
      responses:
        '204':
          description: Campaign successfully deleted
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/campaigns/{id}/questions:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
        description: ID of the campaign
    get:
      tags:
        - Campaigns
        - Questions
      summary: Get questions for a campaign
      description: Retrieves all questions associated with a specific campaign
      operationId: getQuestionsByCampaignId
      responses:
        '200':
          description: Successfully retrieved questions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuestionDTO'
              example:
                - id: 1
                  campaignId: 1
                  text: "How satisfied are you with our services?"
                  required: true
                  orderIndex: 1
                  questionType: "MULTIPLE_CHOICE"
                  answerOptions:
                    - id: 1
                      questionId: 1
                      text: "Very satisfied"
                      orderIndex: 1
                    - id: 2
                      questionId: 1
                      text: "Somewhat satisfied"
                      orderIndex: 2
                    - id: 3
                      questionId: 1
                      text: "Neutral"
                      orderIndex: 3
                - id: 2
                  campaignId: 1
                  text: "Do you have any additional comments?"
                  required: false
                  orderIndex: 2
                  questionType: "TEXT"
                  answerOptions: []
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/questions:
    get:
      tags:
        - Questions
      summary: Get all questions
      description: Retrieves a list of all questions across all campaigns
      operationId: getAllQuestions
      responses:
        '200':
          description: Successfully retrieved questions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuestionDTO'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Questions
      summary: Create a new question
      description: Creates a new question for a specific campaign
      operationId: createQuestion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionDTO'
            example:
              campaignId: 1
              text: "How likely are you to recommend our service to others?"
              required: true
              orderIndex: 3
              questionType: "RATING"
              answerOptions:
                - text: "1 - Not likely"
                  orderIndex: 1
                - text: "2"
                  orderIndex: 2
                - text: "3"
                  orderIndex: 3
                - text: "4"
                  orderIndex: 4
                - text: "5 - Very likely"
                  orderIndex: 5
      responses:
        '201':
          description: Question successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/questions/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
        description: ID of the question
    get:
      tags:
        - Questions
      summary: Get question by ID
      description: Retrieves a specific question by its ID
      operationId: getQuestionById
      responses:
        '200':
          description: Successfully retrieved question
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionDTO'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Questions
      summary: Update a question
      description: Updates an existing question
      operationId: updateQuestion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionDTO'
      responses:
        '200':
          description: Question successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Questions
      summary: Delete a question
      description: Deletes a question by its ID
      operationId: deleteQuestion
      responses:
        '204':
          description: Question successfully deleted
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/questions/{id}/answer-options:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
        description: ID of the question
    get:
      tags:
        - Questions
      summary: Get answer options for a question
      description: Retrieves all answer options associated with a specific question
      operationId: getAnswerOptionsByQuestionId
      responses:
        '200':
          description: Successfully retrieved answer options
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnswerOptionDTO'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/answer-options:
    post:
      tags:
        - Questions
      summary: Create a new answer option
      description: Creates a new answer option for a specific question
      operationId: createAnswerOption
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnswerOptionDTO'
            example:
              questionId: 1
              text: "Extremely satisfied"
              orderIndex: 0
      responses:
        '201':
          description: Answer option successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnswerOptionDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/answer-options/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
        description: ID of the answer option
    put:
      tags:
        - Questions
      summary: Update an answer option
      description: Updates an existing answer option
      operationId: updateAnswerOption
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnswerOptionDTO'
      responses:
        '200':
          description: Answer option successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnswerOptionDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Questions
      summary: Delete an answer option
      description: Deletes an answer option by its ID
      operationId: deleteAnswerOption
      responses:
        '204':
          description: Answer option successfully deleted
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/user-responses:
    get:
      tags:
        - User Responses
      summary: Get all user responses
      description: Retrieves a list of all user responses
      operationId: getAllUserResponses
      responses:
        '200':
          description: Successfully retrieved user responses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponseDTO'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - User Responses
      summary: Submit a user response
      description: Records a user's response to a question
      operationId: submitUserResponse
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserResponseDTO'
            example:
              userId: "user123"
              campaignId: 1
              questionId: 1
              answerOptionId: 2
              textResponse: null
              submissionDate: "2023-07-15T14:30:00Z"
      responses:
        '201':
          description: User response successfully recorded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/user-responses/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
        description: ID of the user response
    get:
      tags:
        - User Responses
      summary: Get user response by ID
      description: Retrieves a specific user response by its ID
      operationId:

